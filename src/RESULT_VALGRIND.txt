==2699== Memcheck, a memory error detector
==2699== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==2699== Using Valgrind-3.21.0-d97fed7c3e-20230428 and LibVEX; rerun with -h for copyright info
==2699== Command: ./test
==2699== Parent PID: 2667
==2699== 
--2699-- 
--2699-- Valgrind options:
--2699--    --trace-children=yes
--2699--    --track-fds=yes
--2699--    --track-origins=yes
--2699--    --leak-check=full
--2699--    --show-leak-kinds=all
--2699--    --verbose
--2699--    --log-file=RESULT_VALGRIND.txt
--2699-- Contents of /proc/version:
--2699--   Linux version 5.15.49-linuxkit-pr (root@buildkitsandbox) (gcc (Alpine 10.2.1_pre1) 10.2.1 20201203, GNU ld (GNU Binutils) 2.35.2) #1 SMP Thu May 25 07:17:40 UTC 2023
--2699-- 
--2699-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-sse3-ssse3-avx-avx2-bmi-f16c-rdrand-rdseed
--2699-- Page sizes: currently 4096, max supported 4096
--2699-- Valgrind library directory: /usr/libexec/valgrind
--2699-- Reading syms from /src/test
--2699-- Reading syms from /lib/ld-musl-x86_64.so.1
--2699--    object doesn't have a symbol table
--2699-- Reading syms from /usr/libexec/valgrind/memcheck-amd64-linux
--2699--    object doesn't have a dynamic symbol table
--2699-- Scheduler: using generic scheduler lock implementation.
--2699-- Reading suppressions file: /usr/libexec/valgrind/default.supp
==2699== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-2699-by-???-on-5a1db86c51ee
==2699== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-2699-by-???-on-5a1db86c51ee
==2699== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-2699-by-???-on-5a1db86c51ee
==2699== 
==2699== TO CONTROL THIS PROCESS USING vgdb (which you probably
==2699== don't want to do, unless you know exactly what you're doing,
==2699== or are doing some strange experiment):
==2699==   /usr/libexec/valgrind/../../bin/vgdb --pid=2699 ...command...
==2699== 
==2699== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==2699==   /path/to/gdb ./test
==2699== and then give GDB the following command
==2699==   target remote | /usr/libexec/valgrind/../../bin/vgdb --pid=2699
==2699== --pid is optional if only one valgrind process is running
==2699== 
--2699-- Reading syms from /usr/libexec/valgrind/vgpreload_core-amd64-linux.so
--2699--    object doesn't have a symbol table
--2699-- Reading syms from /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so
--2699--    object doesn't have a symbol table
--2699-- REDIR: 0x4053200 (libc.musl-x86_64.so.1:strlen) redirected to 0x48aa558 (strlen)
--2699-- REDIR: 0x4052fd7 (libc.musl-x86_64.so.1:strcpy) redirected to 0x48aa5ba (strcpy)
--2699-- REDIR: 0x4052f22 (libc.musl-x86_64.so.1:strchr) redirected to 0x48aa303 (strchr)
--2699-- REDIR: 0x4053302 (libc.musl-x86_64.so.1:strncmp) redirected to 0x48aa93a (strncmp)
--2699-- REDIR: 0x4053387 (libc.musl-x86_64.so.1:strnlen) redirected to 0x48aa532 (strnlen)
--2699-- REDIR: 0x4053446 (libc.musl-x86_64.so.1:strspn) redirected to 0x48adf0d (strspn)
--2699-- REDIR: 0x4052fe5 (libc.musl-x86_64.so.1:strcspn) redirected to 0x48adead (strcspn)
--2699-- Reading syms from /usr/lib/libcheck.so.0.0.0
--2699--    object doesn't have a symbol table
--2699-- REDIR: 0x40533c1 (libc.musl-x86_64.so.1:strrchr) redirected to 0x48aa270 (strrchr)
--2699-- REDIR: 0x402528f (libc.musl-x86_64.so.1:malloc) redirected to 0x48a56bc (malloc)
--2699-- REDIR: 0x4052f32 (libc.musl-x86_64.so.1:strchrnul) redirected to 0x48ad8b4 (strchrnul)
--2699-- REDIR: 0x4026ea1 (libc.musl-x86_64.so.1:realloc) redirected to 0x48a973f (realloc)
--2699-- REDIR: 0x4052fbf (libc.musl-x86_64.so.1:strcmp) redirected to 0x48aaf02 (strcmp)
--2699-- REDIR: 0x4052979 (libc.musl-x86_64.so.1:memcmp) redirected to 0x48ac9aa (memcmp)
--2699-- REDIR: 0x40251cd (libc.musl-x86_64.so.1:free) redirected to 0x48a77d9 (free)
==2699== 
==2699== FILE DESCRIPTORS: 4 open (3 std) at exit.
==2699== Open file descriptor 3: /src/RESULT_VALGRIND.txt
==2699==    <inherited from parent>
==2699== 
==2699== 
==2699== HEAP SUMMARY:
==2699==     in use at exit: 0 bytes in 0 blocks
==2699==   total heap usage: 1,232 allocs, 1,232 frees, 389,370 bytes allocated
==2699== 
==2699== All heap blocks were freed -- no leaks are possible
==2699== 
==2699== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
